1. 언어의 특징
    :   (c++에 비해) 간결하고 언어에 컬렉션 포함, 완전한 객체지향 언어임
    :   확장자가 class인 이유는 자바 코드를 컴파일러(번역기, 개발자) 에서 바이트 코드로 바꾸고 인터프리터(번역기, 사용자)를 통해 어셈블 코드로 변경한 후 이진코드로 변하기 때문

2. 값의 종류와 표현 방법
    : 정수 (26)
        1) 26 (10진수,  4바이트.)
        2) 0x1a(16진수 : 앞에 0x)
        3) 032(8진수 : 앞에 0)
        4) 0b11010(2진수 : 앞에 0b. 소수점은 0.5 = 1/2, 0.25 = 1/2/2 0.125 = 1/2/2/2... ) 
        5) 26L (26을 8바이트로 표현, 사용하면 64비트가 됨. 다른 진수에 붙혀 사용 가능 ex) 0x1aL)
    
    : 실수값 - 진법사용 x
        1) 123.4 ( 기본 )
        2) 123.4f ( 4바이트. 기본값은 8바이트 인데 f붙이면 4바이트가 됨)
        3) 123.4d ( f의 두배. 8바이트)
        4) 1.234e2 (소숫점이 앞으로 두칸 이동했다(e2)는 뜻)
            :   위의 값들이랑 섞어서 사용 가능. (1.234e2f, 1.234e2d 등)

    : 문자값 ('A', '\u0065'(a를 코트값으로 표현 )등 )

    : 진리값 ( false, true )

3. 값의 종류와 형식명칭
    1) 정수 : byte 정수 (1byte), short정수 (2byte), int정수 (4byte), long정수 (8byte)
        : long x = 30; > long은 8byte를 담는 그릇에 30(4byte) 을 담기엔 크지만 에러는 안남( 데이터에 손실이 없기 때문 (묵시적 형변환으로 인해 30이 30L로 변경되서 들어감.))
        : byte x = 30; > byte는 1byte를 담을 수 있는데 30(4byte)를 담기엔 커서 에러가 남 ( 데이터에 손실이 일어남 )
                       ( 단, 데이터 손실을 허용한 경우 byte x = (byte)30;으로 입력 < 형변환을 명시한다고 함 )

    2) 실수 : float ( 4byte ), double( 8byte )
        : float x = 3.5; > ( 3.5는 8byte, float는 4byte => 에러남)
                           ( 단, float x = (float)3.5; 는 에러 안남. ( 데이터 손실을 허용한 경우 ))
        : double x = 3.5f; > ( 3.5f는 4byte, double는 8byte => 에러 x. (묵시적 형변환으로 인해 3.5f가 3.5d로 변경되서 들어감.))

    3) 문자 : char ( 4byte )

    4) 부울 : boolean ( 1bit )

4. 정수의 크기와 범위
    :   1bit는 2개의 값을 보냄 ( 0, 1 ). 2bit는 4개, 3bit는 8개 ... 2^n으로 표현가능
        >   2^8 (256)을 정수로 표현시 => 0 ~ 2^8 - 1 ( -1 인 이유는 0부터 세기 때문)
        >   음수, 양수 구분시 맨앞에 1bit를 기준으로 봄. 값이 1이면 음수, 0이면 양수. 부호비트 또는 MSB 라고부름 
        >   음수 포함 값 : -2^7  ~ 2^7 -1 => -128 ~ 0 ~ 127 ( 음수 값이 1 높은 이유는 0이 겹치기 때문에. ) 

5. 실수 값의 크기와 범위
    :   32bit 기준 부호비트 1bit , 지수부 15bit, 가수부(소숫점) 16bit로 나눔.
    :   ex) 12.125를 표현시 지수부를 줄이고 가수부를 늘려 1.2125e3으로 표현 가능. e값은 지수부에 입력 ( 부호비트 1bit, 지수부8bit, 가수부 23bit로 나눔 )
        >   ㄴ 12.125 = > 0b1100.0010 => 0b1.1000010e3 => 0b1 / 1000010(가수부) / e3(지수부)

6. 자바 변수 선언
    :   모든 키워드는 선언하고 사용. 변수, 함수, 참조변수.. 등을 사용하는것에 맞춰서 선언
        > int 변수명;(정수), void 변수명(int x, int y); (함수 선언), Animal 변수명; (참조변수선언) 등

    : 변수 선언시 앞에 형식명칭( byte, int, float )를 사용해야함. (변수에 크기를 한정해야 하기 때문)

7. 출력 Stream 객체와 API
    1) 출력 Stream
        : System.out.write()로 사용 ( write 자리에 print(), println(), printf()..도 사용가능 )
        : 여러개의 프로그램이 가동될 경우 출력값이 많아짐 = > 실행환경에서 출력 버퍼을 걸어서 우선순위 대로 처리 ( 출력 버퍼를 거는 이유는 출력값이 실행될때까지 해당 프로그램은 먹통이 되기 때문 )
            >   출력 버퍼 ( Output Stream ) : 단반향 스트림. 출력방향으로만 버퍼를 검. 어플리케이션들이 동기화 되는걸 막고 비동기형식으로 돌아가게 함. ( 이유는 위와 동 )

    2) 개체(Entity)와 객체(Object) 
        >   개체 : 실체 ex) 자동차 주문시 팜플렛
        >   객체 : 이름을 가짐 ex) 팜플렛으로 온 차에 이름붙임  (먼소린지 몰겟음 ㅋ)
   
8. printStream과 객체 생성
    - write를 사용해 출력할때 아래에 System.out.flush(); 를 붙혀야함. ( write는 최적화 때문에 한 슬롯이 다찰때까지 안나옴 )
    - 이과정을 생략한게 print를 사용하는것
    - print 사용시 내려쓰기가 아닌 한줄로 쭉 출력되는 특징이 있음 => 이스케이프 문자 사용으로 줄바꿈 할수있음

9. escape 문자
    - \b(백스페이스), \t(수평탭 삽입), \n(새행 삽입), \f(폼 피드(다음페이지로)), \r(캐리지리턴 (제일 안쪽 위치로))
    - \'(홑 따옴표 삽입),\"(이중 따옴표 삽입), \\(역슬레시 삽입) 등이 있음      '

10. println
    -   print의 문제점을 escape로 잡았지만 하나만 println을 쓰면 뒤에 \n을 안써도 됨.
    -   \n이 안먹힐때 print + \n사용하면 됨.

11. printf
    -   변수와 같이 출력시 자연스럽게 나오게 하려면 (int kor1 = 50;)
        System.out.print("국어 :"); 
        System.out.print(kor1);         =>      국어 : 50
        System.out.println(); // <br>처럼 사용

    -   printf는 문자열과 변수를 같이 사용 가능하게 해줌
        System.out.printf("국어 : %d", kor1); => 국어 : 50

    > 날짜 출력시 포멧을 해줘야함 
        ex1) 2022.07.20 = > System.out.printf("%d.%d.%d", 2022, 07, 20); => 2022.07.20 출력
            ㄴ %d %d %d 사이에 넣은 문자나 기호를 틀로 잡고 %d에 뒤에 숫자들 넣어줌 
    
    > %뒤에 붙는 코드
        -   d(정수 10진수), x(정수 16진수), o(정수 8진수), f(실수), e(지수형 실수), c(문자), s(문자열)

12. 형식 지정자 옵션
    >   
        