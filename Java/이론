 --- 자바 폴더에 있는 ex랑 같이볼것 ---


1. 언어의 특징
    :   (c++에 비해) 간결하고 언어에 컬렉션 포함, 완전한 객체지향 언어임
    :   확장자가 class인 이유는 자바 코드를 컴파일러(번역기, 개발자) 에서 바이트 코드로 바꾸고 인터프리터(번역기, 사용자)를 통해 어셈블 코드로 변경한 후 이진코드로 변하기 때문

2. 값의 종류와 표현 방법
    : 정수 (26)
        1) 26 (10진수,  4바이트.)
        2) 0x1a(16진수 : 앞에 0x)
        3) 032(8진수 : 앞에 0)
        4) 0b11010(2진수 : 앞에 0b. 소수점은 0.5 = 1/2, 0.25 = 1/2/2 0.125 = 1/2/2/2... ) 
        5) 26L (26을 8바이트로 표현, 사용하면 64비트가 됨. 다른 진수에 붙혀 사용 가능 ex) 0x1aL)
    
    : 실수값 - 진법사용 x
        1) 123.4 ( 기본 )
        2) 123.4f ( 4바이트. 기본값은 8바이트 인데 f붙이면 4바이트가 됨)
        3) 123.4d ( f의 두배. 8바이트)
        4) 1.234e2 (소숫점이 앞으로 두칸 이동했다(e2)는 뜻)
            :   위의 값들이랑 섞어서 사용 가능. (1.234e2f, 1.234e2d 등)

    : 문자값 ('A', '\u0065'(a를 코트값으로 표현 )등 )

    : 진리값 ( false, true )

3. 값의 종류와 형식명칭
    1) 정수 : byte 정수 (1byte), short정수 (2byte), int정수 (4byte), long정수 (8byte)
        : long x = 30; > long은 8byte를 담는 그릇에 30(4byte) 을 담기엔 크지만 에러는 안남( 데이터에 손실이 없기 때문 (묵시적 형변환으로 인해 30이 30L로 변경되서 들어감.))
        : byte x = 30; > byte는 1byte를 담을 수 있는데 30(4byte)를 담기엔 커서 에러가 남 ( 데이터에 손실이 일어남 )
                       ( 단, 데이터 손실을 허용한 경우 byte x = (byte)30;으로 입력 < 형변환을 명시한다고 함 )

    2) 실수 : float ( 4byte ), double( 8byte )
        : float x = 3.5; > ( 3.5는 8byte, float는 4byte => 에러남)
                           ( 단, float x = (float)3.5; 는 에러 안남. ( 데이터 손실을 허용한 경우 ))
        : double x = 3.5f; > ( 3.5f는 4byte, double는 8byte => 에러 x. (묵시적 형변환으로 인해 3.5f가 3.5d로 변경되서 들어감.))

    3) 문자 : char ( 4byte )

    4) 부울 : boolean ( 1bit )

4. 정수의 크기와 범위
    :   1bit는 2개의 값을 보냄 ( 0, 1 ). 2bit는 4개, 3bit는 8개 ... 2^n으로 표현가능
        >   2^8 (256)을 정수로 표현시 => 0 ~ 2^8 - 1 ( -1 인 이유는 0부터 세기 때문)
        >   음수, 양수 구분시 맨앞에 1bit를 기준으로 봄. 값이 1이면 음수, 0이면 양수. 부호비트 또는 MSB 라고부름 
        >   음수 포함 값 : -2^7  ~ 2^7 -1 => -128 ~ 0 ~ 127 ( 음수 값이 1 높은 이유는 0이 겹치기 때문에. ) 

5. 실수 값의 크기와 범위
    :   32bit 기준 부호비트 1bit , 지수부 15bit, 가수부(소숫점) 16bit로 나눔.
    :   ex) 12.125를 표현시 지수부를 줄이고 가수부를 늘려 1.2125e3으로 표현 가능. e값은 지수부에 입력 ( 부호비트 1bit, 지수부8bit, 가수부 23bit로 나눔 )
        >   ㄴ 12.125 = > 0b1100.0010 => 0b1.1000010e3 => 0b1 / 1000010(가수부) / e3(지수부)

6. 자바 변수 선언
    :   모든 키워드는 선언하고 사용. 변수, 함수, 참조변수.. 등을 사용하는것에 맞춰서 선언
        > int 변수명;(정수), void 변수명(int x, int y); (함수 선언), Animal 변수명; (참조변수선언) 등

    : 변수 선언시 앞에 형식명칭( byte, int, float )를 사용해야함. (변수에 크기를 한정해야 하기 때문)

7. 출력 Stream 객체와 API
    1) 출력 Stream
        : System.out.write()로 사용 ( write 자리에 print(), println(), printf()..도 사용가능 )
        : 여러개의 프로그램이 가동될 경우 출력값이 많아짐 = > 실행환경에서 출력 버퍼을 걸어서 우선순위 대로 처리 ( 출력 버퍼를 거는 이유는 출력값이 실행될때까지 해당 프로그램은 먹통이 되기 때문 )
            >   출력 버퍼 ( Output Stream ) : 단반향 스트림. 출력방향으로만 버퍼를 검. 어플리케이션들이 동기화 되는걸 막고 비동기형식으로 돌아가게 함. ( 이유는 위와 동 )

    2) 개체(Entity)와 객체(Object) 
        >   개체 : 실체 ex) 자동차 주문시 팜플렛
        >   객체 : 이름을 가짐 ex) 팜플렛으로 온 차에 이름붙임  (먼소린지 몰겟음 ㅋ)
   
8. printStream과 객체 생성
    - write를 사용해 출력할때 아래에 System.out.flush(); 를 붙혀야함. ( write는 최적화 때문에 한 슬롯이 다찰때까지 안나옴 )
    - 이과정을 생략한게 print를 사용하는것
    - print 사용시 내려쓰기가 아닌 한줄로 쭉 출력되는 특징이 있음 => 이스케이프 문자 사용으로 줄바꿈 할수있음

9. escape 문자
    - \b(백스페이스), \t(수평탭 삽입), \n(새행 삽입), \f(폼 피드(다음페이지로)), \r(캐리지리턴 (제일 안쪽 위치로))
    - \'(홑 따옴표 삽입),\"(이중 따옴표 삽입), \\(역슬레시 삽입) 등이 있음      '

10. println
    -   print의 문제점을 escape로 잡았지만 하나만 println을 쓰면 뒤에 \n을 안써도 됨.
    -   \n이 안먹힐때 print + \n사용하면 됨.

11. printf
    -   변수와 같이 출력시 자연스럽게 나오게 하려면 (int kor1 = 50;)
        System.out.print("국어 :"); 
        System.out.print(kor1);         =>      국어 : 50
        System.out.println(); // <br>처럼 사용

    -   printf는 문자열과 변수를 같이 사용 가능하게 해줌
        System.out.printf("국어 : %d", kor1); => 국어 : 50

    > 날짜 출력시 포멧을 해줘야함 
        ex1) 2022.07.20 = > System.out.printf("%d.%d.%d", 2022, 07, 20); => 2022.07.20 출력
            ㄴ %d %d %d 사이에 넣은 문자나 기호를 틀로 잡고 %d에 뒤에 숫자들 넣어줌 
    
    > %뒤에 붙는 코드
        -   d(정수 10진수), x(정수 16진수), o(정수 8진수), f(실수), e(지수형 실수), c(문자), s(문자열)

12. InputStream 과정
    >   int code = System.in.read(); 
        :   와 같이 받을수 있지만 입력시 아스키 코드로 들어옴. 
            println => 아스키코드 출력, wirte => 번역해서 출력 이지만 문자를 하나씩 들고옴.
    > netxLine() : 버퍼에 있는 내용을 한번에 다 읽어옴.  
    > next() : 버퍼에 있는 내용을 단어단위로 하나씩 읽어옴 . 
    > nextInt() : 버퍼에 있는 숫자를 정수로 읽음
    > nextFloat() : 버퍼에 있는 숫자를 실수(float, 4byte)로 읽음
    > nextDouble() : 버퍼에 있는 숫자를 실수(double, 8byte)로 읽음
    > 위의 내용을 한번에 해주는것이 scan임   
        : Scanner scan = new Scanner(System.in); 와 같이 사용하고 자바 위쪽에 import java.util.Scanner를 적어줘야 함 (패키지명 부르기)
        : Scanner는 System.in 이라는 입력 스트림 객체를 응용하는 응용객체이기 때문에 저렇게 적음

13. 단항 연산자의 전위와 후위 연산
    : + - ++ -- ! < 자바스크립트랑 의미 같음
    >   int i = 3;
        i++;
        System.out.println(i); // 4
 
        ++i;
        System.out.println(i); // 5

        System.out.println(++i); // 6 => 증가시키고 출력시키기 때문에 6

        System.out.println(i++); // 6 => i를 먼저 출력시키고 그 후에 증가함.

        System.out.println(i); // 7
14. 논리 연산자
    : && || < 자바스크립트랑 의미 같음
        >   (value1 == 1) && (value2 == 2)
        >   (value1 == 1) || (value2 == 2)
    
15. 비트 논리 연산자
    > & ( 비트 교집합 연산자 ), | ( 비트 합집합 연산자 ), ^( 비트 차집합 연산자 ), ~ ( 비트 부정 연산자 ) 가 있음
    > & : 3 & 7 => 0011 & 0111 => 0011 ( 비트로 풀어서 연산. 0 & 0 = 0, 0 & 1 = 0 (참 거짓으로 생각))
    > | : 3 | 7 => 0011 | 0111 => 0111 ( 0 | 0 = 0, 0 | 1 = 1 )
    > ^ : 3 ^ 7 => 0011 ^ 0111 => 0100 ( 차이가 있으면 true, 없으면 false )
    > ~ : ~3 => ~ 0011 => 1100 ( 비트단위로 뒤집음  )

    - 쉬프트 연산자
        > <<( 왼쪽 쉬프트 연산자 ), >> ( 오른쪽 쉬프트 연산자 ). << >> 뒤의 값은 보내는 갯수
        > 3 << 2 => 0011 << 2 => 1100 => 12 
            : 숫자가 1, 0 상관없이 0으로 채움
        > 3 >> 2 => 0011 >> 2 => 0000 => 0
        > 11 >> 2 => 1011 >> 2 => 1110 => 14  
            : 뒤로 2칸 밀면 11이 사라지지만 맨 앞자리가 1인경우는 0이 아닌 1로 채워짐 ( 맨앞 비트는 부호비트라 음수 양수가 바뀌기 때문 )
    - 삼항연산자 : 조건식? '1':'0'
        > 참이면 1이 남고 거짓이면 0이 남음

16. if, while, do-while, for 문은 자바스크립트랑 동일함 .

17. switch와 break 라벨문
    > else if 문은 매뉴가 늘어날수록 흐름이 길어지고 비교하는 내용도 많아져 처리속도가 늦어짐( 1번부터 false값을 계속 받아서 해당하는 매뉴까지 가야하기 때문. )
    > (매뉴는 1~3까지)switch는 1번을 선택할 경우 1부터 3까지 쭉 내려감. 그래서 중간에 break;를 넣어줘 매인매뉴로 돌아가게 해야함. 

18. 저장소 구현
    >   정수형 배열 : int[] kors = new int[3] // kors에 3개의 값을 정수로 저장하겠다.
                     kors[0] = 1; => kors 0번위치에 1을 저장

19. 2차배열
    ex) 3년치 국어성적 저장
        int[][] kors = int[3][3]; // 3개의 방이 있는 3층짜리 건물로 나누겠다.
        kors[3*0+0] (방3개중 0번째방 0번쨰 칸을 의미), kors[3*0+1], kors[3*0+2], ... kors[3*2+2]. 
        kors[0][0], kors[0][1], ... kors[2][2] 와 같이 간단하게 적을수 있음.
    
20. 상수형 변수
    conut와 같은 개념. final int N = 1; // N의 값은 정수 1로 지정하고 이후에 바뀌지 않음.