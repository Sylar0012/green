알고리즘에 대한 이야기

사과주스 만들기

 : 사과 ( 갈아서 넣을거 )

 : 설탕 ( 첨가 )

1. 사과를 갈아야 함 
     조건 : 믹서기로 1cm 이하로 갈것

2. 갈려진 사과에 설탕을 첨가 
     조건 : 측정시 당도가 20이 나와야함.

3. 깔때기로 걸러내서 컵에 담는다
     조건 : 70% 이상이 컵에 담겨야함.


메서드 : 행위를 의미

책임을 전가시키고 재사용을 편하게 하려고 객체지향 프로그램을 씀

분리시키면 어디서 문제가 생겼는지 파악 할 수 있어서 좋음

 -> 분리시키면 재사용도 편함 
  
  ex) 1 > 2 > 3 방식을 2 > 1 > 3 방식으로 바꿔야함


    한번에 쓰면 코딩을 다시 해야하지만 분리시켜서 짜면 순서만 바꾸면 됨.

객체 지향 프로그램 (object oriented program)

추상 명사 : 셀 수 없음 ( 존재 x )

물질 명사 : 셀 수 있음 ( 존재함 )

=> 존재의 유무로 판단함

ex) 가구 = > 추상 명사 ( 침대, 의자 이런걸 가구라고 명한거지 가구라는 것은 존재하지 않음)
    침대, 의자 = > 물질 명사 


      => 가구는 존재하지 않기때문에 객체 (object)가 아님.
           객체 ( object ) 는 존재 할 수 있는 모든것을 뜻하는것. ( 지금 없어도 생산될 수 있으면 객체라고 함 )


object를 컴퓨터를 기준으로 설명하면 

  heap에 들어가는 모든것을 object라 함. ( 컴퓨터의 실제 세상 )
    = > heap에 코드를 집어넣는 행위를 인스턴스 화 라고 한다.
    = > 햄버거라는 코드를 짜고 heap에 안넣어도 object라고 함 ( heap에 넣으면 인스턴스화 할 수 있기 때문 )

oriented 
  ex)
  < 식당 >
  영희는 보고에게 돈까스을 주문한다
  보고는 돈까스을 만들어서 영희에게 돌려준다.

  - > 오브젝트 = 영희, 보고, 돈까스

   역할 : 영희 = 손님, 보고 = 요리사, 돈까스 = 음식 

  손님역할을 철수로 바꾸고, 돈까스를 햄버거로 바꾼다

  철수는 보고에게 햄버거를 주문한다
  보고는 햄버그를 만들어서 철수에게 돌려준다.
    
  - > 오브젝트 = 철수, 보고, 햄버거
   역할 : 철수 = 손님, 보고 = 요리사, 햄버거 = 음식 


객체 지향 프로그램식 으로 적으면

  손님은 요리사에게 음식을 주문한다.
  요리사는 손님에게 음식을 돌려준다.

  = > 수정하려면 손님, 음식, 요리사에 값을 집어 넣으면 된다. ( 위처럼 코드를 바꿀 필요가 없다는 뜻 ) 

------------------------------------

object oriented program은 추상적인 개념을 좋아한다.
 
 